call pathogen#infect()
call pathogen#helptags()

set backspace=indent,eol,start

set number
"autocmd InsertEnter * :set number
"autocmd InsertLeave * :set relativenumber
set tabstop=2
set shiftwidth=2
set expandtab
set ruler
set colorcolumn=80

filetype on
filetype plugin indent on
filetype plugin on 
filetype indent on
syntax on

autocmd FileType python set sw=4
autocmd FileType python set ts=4
autocmd FileType python set sts=4

"autocmd winenter * execute winnr() * 2 . 'wincmd >'
autocmd winenter * vertical resize 80



" Flagging Unnecessary Whitespace
" au BufRead,BufNewFile *.py,*.pyw,*.c,*.h, *.rb match BadWhitespace /\s\+$/

" Run flake8 every time python file is saved
" autocmd BufWritePost *.py call flake8#Flake8()
"
" autocmd BufWritePost *.py call Flake8()
" autocmd BufWritePost *.py call Mypy

" Run RuboCop every time a ruby file is saved
" autocmd BufWritePost *.rb :RuboCop
autocmd FileType ruby map <buffer> <leader>c :RuboCop<CR>

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
nmap <leader>c :SyntasticCheck<CR>


let g:syntastic_mode_map = { 'mode': 'passive',
                            \ 'passive_filetypes': ['python', 'javascript'] }


" autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" ==========================================================================
" keys that I should never use
" ---------------------------------------------------------------------------
inoremap <Left>  <NOP>
inoremap <Right> <NOP>
inoremap <Up>    <NOP>
inoremap <Down>  <NOP>
nnoremap <Left>  <NOP>
nnoremap <Right> <NOP>
nnoremap <Up>    <NOP>
nnoremap <Down>  <NOP>

" ==========================================================================
" Version for regex used by vim. For some reasons the recent regex 
" engine slow the vim performance for ruby
" ---------------------------------------------------------------------------
set re=1 

" ==========================================================================
" SWAP
" ---------------------------------------------------------------------------
" vim put swap, backup and undo files in a special location instead 
" of the working directory of the file being edited:
" ---------------------------------------------------------------------------
set undofile
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//

" ===========================================================================
" COLORS
" ---------------------------------------------------------------------------
 "set cursorline
 "set cursorcolumn
set background=dark

"colorscheme solarized
"colorscheme sourcerer
colorscheme hybrid
"colorscheme distinguished
"colorscheme grb256
"colorscheme distinguished
"colorscheme railscasts
"colorscheme python
"colorscheme codeschool 
"set guifont=Monaco:h12


" ===========================================================================
" BASIC KEY MAPS
" ---------------------------------------------------------------------------
" Clipboard register
"map <leader>y "*y
"map <leader>p "*p
"set clipboard=unnamed
"
"map <C-m> :!mypy % --disallow-untyped-defs<CR>
map <leader>t :!pytest % <CR>
map <leader>p :!pylint % <CR>

" move around splits
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

"NerdTree
map <C-n> :NERDTreeToggle<CR>
let g:NERDTreeDirArrows=0

"Ack Search"
nmap <leader>f <Esc>:Ack!

" ===========================================================================
" RUN THE CURRENT FILE (PYTHON|RUBY|SHELL)
" ---------------------------------------------------------------------------
nnoremap <leader>e :call ExecuteFile()<cr>
function! ExecuteFile()
  if &filetype=='python'
    !python %
  elseif &filetype=='sh'
    !./%
  elseif &filetype=='ruby'
    !ruby %
  elseif &filetype=='go'
    :GoRun
  endif
endfunction

" ===========================================================================
" BUILD
" ---------------------------------------------------------------------------
nnoremap <leader>b :call BuildFile()<cr>
function! BuildFile()
  if &filetype=='go'
    :GoBuild
  endif
endfunction



" ===========================================================================
" OPEN THE RSPEC FILE OF A GIVEN RUBY FILE(CONTROLLER, MODEL, ETC)
" ---------------------------------------------------------------------------
nnoremap <leader>a :call OpenTestAlternate()<cr>
function! OpenTestAlternate()
  if &filetype=='python'
    let new_file = AlternateForCurrentFilePython()
    exec ':vsplit ' . new_file
  endif

  if &filetype=='ruby'
    let new_file = AlternateForCurrentFile()
    exec ':vsplit ' . new_file
  endif
endfunction

" Close all other windows, open a vertical split, and open this file's test
" alternate in it.
" nnoremap <leader>s :call FocusOnFile()<cr>
function! FocusOnFile()
  tabnew %
  normal! v
  normal! l
  call OpenTestAlternate()
  normal! h
endfunction

function! AlternateForCurrentFilePython()
  let current_file = expand("%")
  let new_file = current_file
  let in_tests = match(current_file, '^tests/') != -1
  let going_to_tests = !in_tests
  let in_app = match(current_file, '\<search\>') != -1 
  if going_to_tests
    if in_app
      let new_file = substitute(new_file, '^app/', '', '')
    end
    let new_file = substitute(new_file, 'search/', '', '') "Remove search from the path. There is no 'search' inside test folder
    let python_file = split(new_file, '([^/]+)$')
    let new_file = substitute(new_file, '/*$', python_file[1], '')
    let new_file = 'tests/unit/' . new_file
  else
    let new_file = substitute(new_file, '_spec\.rb$', '.rb', '')
    let new_file = substitute(new_file, '^spec/', '', '')
    if in_app
      let new_file = 'app/' . new_file
    end
  endif
  return new_file
endfunction

function! AlternateForCurrentFile()
  let current_file = expand("%")
  let new_file = current_file
  let in_spec = match(current_file, '^spec/') != -1
  let going_to_spec = !in_spec
  let in_app = match(current_file, '\<controllers\>') != -1 || match(current_file, '\<models\>') != -1 || match(current_file, '\<views\>') != -1 || match(current_file, '\<helpers\>') != -1
  if going_to_spec
    if in_app
      let new_file = substitute(new_file, '^app/', '', '')
    end
    let new_file = substitute(new_file, '\.e\?rb$', '_spec.rb', '')
    let new_file = 'spec/' . new_file
  else
    let new_file = substitute(new_file, '_spec\.rb$', '.rb', '')
    let new_file = substitute(new_file, '^spec/', '', '')
    if in_app
      let new_file = 'app/' . new_file
    end
  endif
  return new_file
endfunction

" -------------------------------------------------------
" Pytest
" -------------------------------------------------------
"autocmd FileType python nmap <silent><Leader>t <Esc>:Pytest file<CR>
""autocmd FileType python nmap <silent><Leader>T <Esc>:Pytest class<CR>
"autocmd FileType python nmap <silent><Leader>T <Esc>:Pytest method<CR>
"autocmd FileType python nmap <silent><Leader>l <Esc>:Pytest last<CR>

" ------------------------------------------------------
" VROOM PLUGIN CONFIG
" -----------------------------------------------------
" Map default keys to run tests (Default 1)
let g:vroom_map_keys = 0 
"nnoremap <leader>t :VroomRunTestFile<cr>
"nnoremap <leader>T :VroomRunNearestTest<cr>
"nnoremap <leader>l :VroomRunLastTest<cr>

"autocmd FileType ruby nnoremap <leader>t :VroomRunTestFile<cr>
"autocmd FileType ruby nnoremap <leader>T :VroomRunNearestTest<cr>
"autocmd FileType ruby nnoremap <leader>l :VroomRunLastTest<cr>

" Add the virtualenv's site-packages to vim path
"import os.path
"import sys
"import vim
"if 'VIRTUAL_ENV' in os.environ:
"    project_base_dir = os.environ['VIRTUAL_ENV']
"    sys.path.insert(0, project_base_dir)
"    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"    execfile(activate_this, dict(__file__=activate_this))
"EOF

set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_custom_ignore = 'tmp\|DS_Store\|git'

"let ropevim_vim_completion=0
"let ropevim_extended_complete=0

"let g:jedi#goto_command = "<leader>d"
"let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = "<leader>d"
"let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>u"
"let g:jedi#completions_command = "<C-Space>"
"let g:jedi#rename_command = "<leader>re"
let g:jedi#use_tabs_not_buffers = 1


" Trigger configuration. Do not use <tab> if you use
" https://github.com/Valloric/YouCompleteMe.
"let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<c-b>"
"let g:UltiSnipsJumpBackwardTrigger="<c-z>"
"
" If you want :UltiSnipsEdit to split your window.
"let g:UltiSnipsEditSplit="vertical"
"
"
"""""""
